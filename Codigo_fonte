#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define DEBUG 0 

typedef struct{
    int x;
    int y;
}coordenadas;

int  linhas, colunas;

//Busca recursiva: Retorna a matriz com a região segmentada segmentada
// imagem: armazena os valores dos pixels
// Origem : Armarmazena as coordenadas do ponto cujos vizinhos serao verificados
// Soma : armazena a Soma dos valores da regiao segmentada
// Quantidade : armazena a quantidade de pixels na regiao segmentada
// Identificacao : Valor negativo que os pixels pertencentes a area segmentada receberao
int** busca_recursiva(int** imagem, int criterio, coordenadas origem, int soma, int quantidade, int identificacao){
    
    coordenadas destino;

    if(origem.y != 0){ //Realiza a busca no pixel de cima
        
        if(imagem[origem.y + 1][origem.x] != -1){ // Verifica se o pixel já foi conquistado
           
            if(criterio >= abs((imagem[origem.y+1][origem.x]) - soma/quantidade)){//Verifica se o pixel deve ser conquistado
                
                soma += imagem[origem.y+1][origem.x];
                quantidade++;
                imagem[origem.y + 1][origem.x] = identificacao;
                destino.x = origem.x;
                destino.y = origem.y + 1;

                busca_recursiva(imagem, criterio, destino, soma, quantidade, identificacao);

            }
        }
    }

    if(origem.x < colunas){ // Realiza a busca no pixel da direita

        if(imagem[origem.y][origem.x + 1] != -1){ // Verifica se o pixel já foi conquistado
           
            if(criterio >= abs((imagem[origem.y][origem.x + 1]) - soma/quantidade)){//Verifica se o pixel deve ser conquistado
                
                soma += imagem[origem.y][origem.x + 1];
                quantidade++;
                imagem[origem.y][origem.x + 1] = identificacao;
                destino.x = origem.x + 1;
                destino.y = origem.y;

                busca_recursiva(imagem, criterio, destino, soma, quantidade, identificacao);

            }
        }

    }

    if(origem.y < linhas){ // Realiza a busca no pixel de baixo

        if(imagem[origem.y - 1][origem.x] != -1){// Verifica se o pixel já foi conquistado
           
            if(criterio >= abs((imagem[origem.y - 1][origem.x]) - soma/quantidade)){//Verifica se o pixel deve ser conquistado
                
                soma += imagem[origem.y - 1][origem.x];
                quantidade++;
                imagem[origem.y - 1][origem.x] = identificacao;
                destino.x = origem.x;
                destino.y = origem.y - 1;

                busca_recursiva(imagem, criterio, destino, soma, quantidade, identificacao);

            }
        }

    }

    if(origem.x > 0){ // Realiza a busca no pixel da esqueda

        if(imagem[origem.y][origem.x - 1] != -1){// Verifica se o pixel já foi conquistado
           
            if(criterio >= abs((imagem[origem.y][origem.x - 1]) - soma/quantidade)){//Verifica se o pixel deve ser conquistado
                
                soma += imagem[origem.y][origem.x - 1];
                quantidade++;
                imagem[origem.y][origem.x - 1] = identificacao;
                destino.x = origem.x - 1;
                destino.y = origem.y;

                busca_recursiva(imagem, criterio, destino, soma, quantidade, identificacao);

            }
        }

    }

}

//Função que detecta e imprime os pixels das bordas de uma area segmentada: 
/*void detecta_bordas(int** imagem){
    int x;
    int y;
    coordenadas cima, direita, baixo, esquerda;
    

    for(x = 0; x < colunas; x++){

        for(y = 0; y < linhas; y++){
            if(imagem[x][y] < 0){ // verifica se o pixel atual pertence a uma area segmentada
                
                //Verifica se o pixel de cima pertence a area segmentada: 
                cima.x = x - 1; cima.y = y;
                if(cima.x >= 0){

                } 

            }
        }

    }
}*/

int main(){

    char name_file[11], P2[3]; // Armazena o nome do arquivo.
    int** imagem; //Armazena a matriz da imagem // Recebe um valor negativo se o pixel for conquistado
    FILE* arq_i; // Arquivo a ser lido
    int qtd_consultas, criterio, input; 
    coordenadas entrada; //Armazena o ponto de inicio do processo de busca.
    int contador = -1; // Variavel que vai sendo decrementada a cada busca para diferenciar as areas segmentadas

    scanf("%s", name_file);
    scanf("%d", &qtd_consultas);
    
    arq_i = fopen(name_file, "r");
    
    if(arq_i == NULL){
        printf("Nao foi possivel abrir o arquivo.\n");
        return 1;
    }

    fscanf(arq_i, "%s", P2);

    if(strcmp(P2, "P2\0") != 0){
        printf("Erro de leitura no arquivo\n");
        return 2;
    }

    fscanf(arq_i, "%d %d %d", &colunas, &linhas, &input);
    //Aloca a matriz da imagem dinamicamente: 
    imagem = malloc(sizeof(int*) * linhas);
    for(int i = 0; i < linhas; i++) {
        imagem[i] = malloc(sizeof(int)*colunas);
    }  


    //Lê a matriz:     
    for(int i = 0; i < linhas; i++){

        for(int j = 0; j < colunas; j++){
            fscanf(arq_i, "%d", &input);
            if(input == EOF){
                printf("Erro na leitura da imagem");
                return 2;
            }else{
                imagem[i][j] = input;
            }
        }

    }
    fclose(arq_i);
    
    if(DEBUG){
        for(int i = 0; i < linhas; i++){

            for(int j = 0; j < colunas; j++){
                printf("%d ", imagem[i][j]);
            }
            printf("\n");
        }
    }
    
    d// Realiza as buscas e as consultas:  
    for(int i = 0; i < qtd_consultas; i++){

        scanf("%d %d %d", &entrada.y, &entrada.x, &criterio);      

        entrada.y = linhas - 1 - entrada.y;
        
        if(DEBUG) printf("Coord(x = %d, y = %d): %d\n",entrada.x, entrada.y, imagem[entrada.y][entrada.x]);
        imagem = busca_recursiva(imagem, criterio, entrada, imagem[entrada.x][entrada.y], 1, contador);
        contador--;
    }



    

    for(int i = 0; i < linhas; i++) {
        free(imagem[i]);
    }
    free(imagem);
    return 0;
}
